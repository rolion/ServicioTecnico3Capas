package Datos;
// Generated Sep 2, 2015 9:20:12 AM by Hibernate Tools 4.3.1


import interfaces.THibernateHelper;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import org.hibernate.Query;

/**
 * TipoPersona generated by hbm2java
 */
public class TipoPersona extends THibernateHelper implements java.io.Serializable {


     private Integer id;
     private String nombre;
     private Boolean eliminado;
     private String descripcion;
     private Set personas = new HashSet(0);
     private long currentTransaction;
    public TipoPersona() {
        this.currentTransaction=0;
    }

    public TipoPersona(String nombre, Boolean eliminado, String descripcion, Set personas) {
       this.nombre = nombre;
       this.eliminado = eliminado;
       this.descripcion = descripcion;
       this.personas = personas;
    }
   
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }
    public String getNombre() {
        return this.nombre;
    }
    
    public void setNombre(String nombre) {
        this.nombre = nombre;
    }
    public Boolean getEliminado() {
        return this.eliminado;
    }
    
    public void setEliminado(Boolean eliminado) {
        this.eliminado = eliminado;
    }
    public String getDescripcion() {
        return this.descripcion;
    }
    
    public void setDescripcion(String descripcion) {
        this.descripcion = descripcion;
    }
    public Set getPersonas() {
        return this.personas;
    }
    
    public void setPersonas(Set personas) {
        this.personas = personas;
    }


    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final TipoPersona other = (TipoPersona) obj;
        if (!Objects.equals(this.id, other.id)) {
            return false;
        }
        if (!Objects.equals(this.nombre, other.nombre)) {
            return false;
        }
        if (!Objects.equals(this.eliminado, other.eliminado)) {
            return false;
        }
        if (!Objects.equals(this.descripcion, other.descripcion)) {
            return false;
        }
        return true;
    }


 @Override
    public List buscar() throws Exception{
        try {
             getConection();
             getConection().beginTransaction();
             String hql="FROM TipoPersona AS tp WHERE tp.nombre like :nombre AND tp.eliminado = :estado";
             Query query =getConection().createQuery(hql);
             query.setString("nombre", this.nombre+"%");
             query.setBoolean("estado", false);
             List l=null;
             l=query.list();
             getConection().getTransaction().commit();
             return l;
         } catch (Exception ex) {   
            if(getConection()!=null)
               getConection().getTransaction().rollback();
            throw new Exception("Erro al buscar");
         }
        
       
    }

    @Override
    public Boolean eliminar()throws Exception{
        //this.estado=false;
        try{
            return eliminarEntidad(this); 
        }catch(Exception e){
            throw new Exception(e.getMessage()+", Error al eliminar tipo de persona");
        }
        
    }
    public List listarTodos(){
        try {
             getConection();
             
             getConection().beginTransaction();
             String hql="FROM TipoPersona WHERE eliminado = :estado";
             Query query =getConection().createQuery(hql).setBoolean("estado", false);
             List l=null;
             l=query.list();
             getConection().getTransaction().commit();
             return l;
         } catch (Exception ex) {   
            if(getConection()!=null && getConection().isOpen())
               getConection().getTransaction().rollback();
            
         }
         return null;
    }



    @Override
    public Object modificar() throws Exception{
        try{
            modificarEntidad(this);
            return this;
        }catch(Exception e){
            throw new Exception(e.getMessage()+", Error al modificar el tipo de persona");
        }
        
    }

    @Override
    public String toString() {
        return  nombre ;
    }

    @Override
    public Object guardar(long transactionID) throws Exception {
          
        try{
            this.eliminado=false;
            guardarEntidad(this);
            
        }catch(Exception e){
            throw new Exception(e.getMessage()+", la entidad Tipo Persona");
        }
        return this;
    }

    @Override
    public boolean join(long transactionID) {
         if(this.currentTransaction!=0){
            return false;
        }
        this.currentTransaction=transactionID;
        return true;
    }

    @Override
    public boolean commit(long transactionID) throws Exception {
        if(this.currentTransaction!=transactionID){
            System.out.println("id de transaccion equivocado");
            System.out.println("currentTransaction= "+this.currentTransaction);
            System.out.println("transactionID= "+transactionID);
            return false;
        }
        this.guardar(transactionID);
        return true;
    }

    @Override
    public boolean cancel(long transactionID) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Object guardar() throws Exception {
          try{
            this.eliminado=false;
            guardarEntidad(this);
            
        }catch(Exception e){
            throw new Exception(e.getMessage()+", la entidad Tipo Persona");
        }
        return this;
    }

}


