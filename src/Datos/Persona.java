package Datos;
// Generated Sep 2, 2015 4:26:49 PM by Hibernate Tools 4.3.1


import interfaces.SpecificParticipant;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.hibernate.HibernateException;
import org.hibernate.Query;

/**
 * Persona generated by hbm2java
 */
public class Persona extends SpecificParticipant  implements java.io.Serializable {


     private Integer id;
     private TipoPersona tipoPersona;
     private String nombre;
     private String apellido;
     private Integer ci;
     private Integer telefono;
     private String email;
     private String nombreEmpresa;
     private Boolean eliminado;
     private Set notaServicios = new HashSet(0);
     private Set notaPeritos = new HashSet(0);
     private long currentTransaction;
    public Persona() {
        this.currentTransaction=0;
    }

    public Persona(TipoPersona tipoPersona, String nombre, String apellido, Integer ci, Integer telefono, String email, String nombreEmpresa, Boolean eliminado, Set notaServicios, Set notaPeritos) {
       this.tipoPersona = tipoPersona;
       this.nombre = nombre;
       this.apellido = apellido;
       this.ci = ci;
       this.telefono = telefono;
       this.email = email;
       this.nombreEmpresa = nombreEmpresa;
       this.eliminado = eliminado;
       this.notaServicios = notaServicios;
       this.notaPeritos = notaPeritos;
    }
   
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }
    public TipoPersona getTipoPersona() {
        return this.tipoPersona;
    }
    
    public void setTipoPersona(TipoPersona tipoPersona) {
        this.tipoPersona = tipoPersona;
    }
    public String getNombre() {
        return this.nombre;
    }
    
    public void setNombre(String nombre) {
        this.nombre = nombre;
    }
    public String getApellido() {
        return this.apellido;
    }
    
    public void setApellido(String apellido) {
        this.apellido = apellido;
    }
    public Integer getCi() {
        return this.ci;
    }
    
    public void setCi(Integer ci) {
        this.ci = ci;
    }
    public Integer getTelefono() {
        return this.telefono;
    }
    
    public void setTelefono(Integer telefono) {
        this.telefono = telefono;
    }
    public String getEmail() {
        return this.email;
    }
    
    public void setEmail(String email) {
        this.email = email;
    }
    public String getNombreEmpresa() {
        return this.nombreEmpresa;
    }
    
    public void setNombreEmpresa(String nombreEmpresa) {
        this.nombreEmpresa = nombreEmpresa;
    }
    public Boolean getEliminado() {
        return this.eliminado;
    }
    
    public void setEliminado(Boolean eliminado) {
        this.eliminado = eliminado;
    }
    public Set getNotaServicios() {
        return this.notaServicios;
    }
    
    public void setNotaServicios(Set notaServicios) {
        this.notaServicios = notaServicios;
    }
    public Set getNotaPeritos() {
        return this.notaPeritos;
    }
    
    public void setNotaPeritos(Set notaPeritos) {
        this.notaPeritos = notaPeritos;
    }

    @Override
    public List buscar() throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    public List buscarPorNombre() throws Exception{
        try {
             getConection();
             getConection().beginTransaction();
             String hql="FROM Persona AS p JOIN FETCH p.tipoPersona tp WHERE p.nombre like :nombre AND p.eliminado = :estado";
             Query query =getConection().createQuery(hql);
             query.setString("nombre", this.nombre+"%");
             query.setBoolean("estado", false);
             List l=null;
             l=query.list();
             getConection().getTransaction().commit();
             return l;
         } catch (Exception ex) {   
            if(getConection()!=null)
               getConection().getTransaction().rollback();
            throw new Exception("Erro al buscar");
         }
    }

    @Override
    public Boolean eliminar() throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }



    @Override
    public Object modificar() throws Exception {
        return modificarEntidad(this);
    }
    public List listarTodos() throws Exception{
        try {
             getConection();
             getConection().beginTransaction();
             String hql="FROM Persona AS p JOIN FETCH p.tipoPersona tp WHERE  p.eliminado = :estado";
             Query query =getConection().createQuery(hql);
            
             query.setBoolean("estado", false);
             List l=null;
             l=query.list();
             getConection().getTransaction().commit();
             return l;
         } catch (Exception ex) {   
            if(getConection()!=null)
               getConection().getTransaction().rollback();
            throw new Exception("Erro al buscar");
         }
    }
    
    public List listarTecnicos() throws Exception{
        try{
            initTransaction();
            Query q=getConection().createQuery("FROM Persona p JOIN FETCH p.tipoPersona tp"
                    + " WHERE tp.nombre like :tecnico and p.eliminado = :estado")
                    .setString("tecnico", "tecnico%")
                    .setBoolean("estado", Boolean.FALSE);
            List r=q.list();
            comitTransaction();
            return r;
        }catch(HibernateException he){
            System.out.println(he.getMessage());
            rollbackTransaciont();
            throw new Exception("Error al listar tecnicos");
        }catch(Exception ex){
            System.out.println(ex.getMessage());
            rollbackTransaciont();
            throw new Exception("Error al listar tecnicos");
        }
    }

    @Override
    public String toString() {
        return  nombre ;
    }

    @Override
    public Object guardar(long transactionID) throws Exception {
        this.eliminado=Boolean.FALSE;
        return guardarEntidad(this);
    }

    @Override
    public boolean join(long transactionID) {
        if(this.currentTransaction!=0){
            return false;
        }
        this.currentTransaction=transactionID;
        return true;
    }

    @Override
    public boolean commit(long transactionID) throws Exception {
        if(this.currentTransaction!=transactionID){
            System.out.println("id de transaccion equivocado");
            System.out.println("currentTransaction= "+this.currentTransaction);
            System.out.println("transactionID= "+transactionID);
            return false;
        }
        this.guardar(transactionID);
        return true;
    }

    @Override
    public boolean cancel(long transactionID) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Object guardar() throws Exception {
        this.eliminado=Boolean.FALSE;
        return guardarEntidad(this);
    }




}


