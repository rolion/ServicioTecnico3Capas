package Datos;
// Generated Sep 2, 2015 4:26:49 PM by Hibernate Tools 4.3.1


import interfaces.THibernateHelper;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.hibernate.Query;

/**
 * NotaServicio generated by hbm2java
 */
public class NotaServicio extends THibernateHelper implements java.io.Serializable {


     private Integer id;
     private Persona persona;
     private Date fecha;
     private String descripcionCliente;
     private Boolean eliminado;
     private Set detalleNotas = new HashSet(0);
     private Set notaPeritos = new HashSet(0);
     private long currentTransaction;

    public NotaServicio() {
        this.currentTransaction=0;
    }

    public NotaServicio(Persona persona, Date fecha, String descripcionCliente, Boolean eliminado, Set detalleNotas, Set notaPeritos) {
       this.persona = persona;
       this.fecha = fecha;
       this.descripcionCliente = descripcionCliente;
       this.eliminado = eliminado;
       this.detalleNotas = detalleNotas;
       this.notaPeritos = notaPeritos;
    }
   
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }
    public Persona getPersona() {
        return this.persona;
    }
    
    public void setPersona(Persona persona) {
        this.persona = persona;
    }
    public Date getFecha() {
        return this.fecha;
    }
    
    public void setFecha(Date fecha) {
        this.fecha = fecha;
    }
    public String getDescripcionCliente() {
        return this.descripcionCliente;
    }
    
    public void setDescripcionCliente(String descripcionCliente) {
        this.descripcionCliente = descripcionCliente;
    }
    public Boolean getEliminado() {
        return this.eliminado;
    }
    
    public void setEliminado(Boolean eliminado) {
        this.eliminado = eliminado;
    }
    public Set getDetalleNotas() {
        return this.detalleNotas;
    }
    
    public void setDetalleNotas(Set detalleNotas) {
        this.detalleNotas = detalleNotas;
    }
    public Set getNotaPeritos() {
        return this.notaPeritos;
    }
    
    public void setNotaPeritos(Set notaPeritos) {
        this.notaPeritos = notaPeritos;
    }
    
    public List listarTodos() throws Exception{
        try{
            initTransaction();
            Query q=getConection().createQuery("FROM NotaServicio ns JOIN FETCH "
                    + "ns.persona WHERE ns.eliminado = :estado")
                    .setBoolean("estado", Boolean.FALSE);
            List r=q.list();
            comitTransaction();
            return r;
        }catch(Exception ex){
            System.out.println(ex.getMessage());
            rollbackTransaciont();
            throw new Exception("Error al listar");
        }
        
    }

    @Override
    public List buscar() throws Exception {
        String query="FROM NotaServicio ns JOIN FETCH ns.persona WHERE ns.id = :id AND ns.eliminado = :estado";
        return buscarEntidad(query, id);
    }


    @Override
    public Boolean eliminar() throws Exception {
        eliminarEntidad(this);
        return true;
    }



    @Override
    public Object modificar() throws Exception {
        return modificarEntidad(this);
    }

    @Override
    public String toString() {
        return  id.toString() ;
    }

    @Override
    public Object guardar(long transactionID) throws Exception {
        
        return guardarEntidad(this);
    }

    @Override
    public boolean join(long transactionID) {
        if(this.currentTransaction!=0){
            return false;
        }
        this.currentTransaction=transactionID;
        return true;
    }

    @Override
    public boolean commit(long transactionID) throws Exception {
        if(this.currentTransaction!=transactionID){
            System.out.println("id de transaccion equivocado");
            System.out.println("currentTransaction= "+this.currentTransaction);
            System.out.println("transactionID= "+transactionID);
            throw new Exception("Error al guardar la nota");
        }
        guardarEntidad(this);
        return true;
    }

    @Override
    public boolean cancel(long transactionID) {
        if(this.currentTransaction==transactionID && this.id!=null){
            try {
                eliminarEntidad(this);
                return true;
            } catch (Exception ex) {
                System.out.println("Error al eliminar el objeto nota de servicio");
                System.out.println("currentTransaction= "+this.currentTransaction);
                Logger.getLogger(NotaServicio.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return false;
    }

    @Override
    public Object guardar() throws Exception {
        return guardarEntidad(this);
    }
    
    



}


