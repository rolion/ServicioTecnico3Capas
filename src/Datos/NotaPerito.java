package Datos;
// Generated Sep 4, 2015 11:14:54 AM by Hibernate Tools 4.3.1


import interfaces.SpecificParticipant;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.hibernate.HibernateException;
import org.hibernate.Query;

/**
 * NotaPerito generated by hbm2java
 */
public class NotaPerito extends SpecificParticipant implements java.io.Serializable {


     private Integer id;
     private NotaServicio notaServicio;
     private Persona persona;
     private Date fecha;
     private Boolean eliminado;
     private Set detallePeritos = new HashSet(0);
     private Set notaEntregas = new HashSet(0);
     private long currentTransaction;

    public NotaPerito() {
        this.currentTransaction=0;
    }

    public NotaPerito(NotaServicio notaServicio, Persona persona, Date fecha, Boolean eliminado, Set detallePeritos, Set notaEntregas) {
       this.notaServicio = notaServicio;
       this.persona = persona;
       this.fecha = fecha;
       this.eliminado = eliminado;
       this.detallePeritos = detallePeritos;
       this.notaEntregas = notaEntregas;
    }
   
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }
    public NotaServicio getNotaServicio() {
        return this.notaServicio;
    }
    
    public void setNotaServicio(NotaServicio notaServicio) {
        this.notaServicio = notaServicio;
    }
    public Persona getPersona() {
        return this.persona;
    }
    
    public void setPersona(Persona persona) {
        this.persona = persona;
    }
    public Date getFecha() {
        return this.fecha;
    }
    
    public void setFecha(Date fecha) {
        this.fecha = fecha;
    }
    public Boolean getEliminado() {
        return this.eliminado;
    }
    
    public void setEliminado(Boolean eliminado) {
        this.eliminado = eliminado;
    }
    public Set getDetallePeritos() {
        return this.detallePeritos;
    }
    
    public void setDetallePeritos(Set detallePeritos) {
        this.detallePeritos = detallePeritos;
    }
    public Set getNotaEntregas() {
        return this.notaEntregas;
    }
    
    public void setNotaEntregas(Set notaEntregas) {
        this.notaEntregas = notaEntregas;
    }

    @Override
    public List buscar() throws Exception {
        String q="FROM NotaPerito np JOIN FETCH np.persona p JOIN FETCH np.notaServicio "
                + "JOIN FETCH np.detallePeritos dp JOIN FETCH dp.servicio WHERE np.eliminado = :estado "
                + "AND np.notaServicio.id= :id ";
        return this.buscarEntidad(q, this.notaServicio.getId());
    }
    public List listarTodos() throws Exception{
        try{
            initTransaction();
            Query q=getConection().createQuery("FROM NotaPerito np JOIN FETCH np.persona p JOIN FETCH np.notaServicio "
                    + "JOIN FETCH np.detallePeritos dp JOIN FETCH dp.servicio WHERE np.eliminado = :estado Group by np.id"
                    ).setBoolean("estado", Boolean.FALSE);
            List l= q.list();
            comitTransaction();
            return l;
        }catch(HibernateException he){
            rollbackTransaciont();
            throw new Exception("Error al listar");
        }
        
    }

    @Override
    public Boolean eliminar() throws Exception {
        this.eliminarEntidad(this);
        return true;
    }



    @Override
    public Object modificar() throws Exception {
        return this.modificarEntidad(this);
    }

    @Override
    public String toString() {
        return  id.toString() ;
    }

    @Override
    public Object guardar(long transactionID) throws Exception {
        return this.guardarEntidad(this);
    }

    @Override
    public boolean join(long transactionID) {
        if(this.currentTransaction!=0){
            return false;
        }
        this.currentTransaction=transactionID;
        return true;
    }

    @Override
    public boolean commit(long transactionID) throws Exception {
        if(this.currentTransaction!=transactionID){
            System.out.println("id de transaccion equivocado");
            System.out.println("currentTransaction= "+this.currentTransaction);
            System.out.println("transactionID= "+transactionID);
            return false;
        }
        this.guardar(transactionID);
        return true;
    }

    @Override
    public boolean cancel(long transactionID) {
        if(this.currentTransaction==transactionID && this.id!=null){
            try {
                eliminarEntidad(this);
                return true;
            } catch (Exception ex) {
                Logger.getLogger(NotaPerito.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return false;
    }

    @Override
    public Object guardar() throws Exception {
        return this.guardarEntidad(this);
    }

    


}


