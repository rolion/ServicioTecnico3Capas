package Datos;
// Generated Sep 2, 2015 4:26:49 PM by Hibernate Tools 4.3.1


import interfaces.THibernateHelper;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.hibernate.Query;

/**
 * AgenteQuimico generated by hbm2java
 */
public class AgenteQuimico extends THibernateHelper implements java.io.Serializable {


     private Integer id;
     private String nombre;
     private String clasificacion;
     private Boolean eliminado;
     private Set extintors = new HashSet(0);
     private long currentTransaction;
    public AgenteQuimico() {
        this.currentTransaction=0;
    }

    public AgenteQuimico(String nombre, String clasificacion, Boolean eliminado, Set extintors) {
       this.nombre = nombre;
       this.clasificacion = clasificacion;
       this.eliminado = eliminado;
       this.extintors = extintors;
    }
   
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }
    public String getNombre() {
        return this.nombre;
    }
    
    public void setNombre(String nombre) {
        this.nombre = nombre;
    }
    public String getClasificacion() {
        return this.clasificacion;
    }
    
    public void setClasificacion(String clasificacion) {
        this.clasificacion = clasificacion;
    }
    public Boolean getEliminado() {
        return this.eliminado;
    }
    
    public void setEliminado(Boolean eliminado) {
        this.eliminado = eliminado;
    }
    public Set getExtintors() {
        return this.extintors;
    }
    
    public void setExtintors(Set extintors) {
        this.extintors = extintors;
    }

    @Override
    public List buscar() throws Exception {
        try {
             getConection();
             getConection().beginTransaction();
             String hql="FROM AgenteQuimico AS a  WHERE a.nombre like :nombre AND a.eliminado = :estado";
             Query query =getConection().createQuery(hql);
             query.setString("nombre", this.nombre+"%");
             query.setBoolean("estado", false);
             List l=null;
             l=query.list();
             getConection().getTransaction().commit();
             return l;
         } catch (Exception ex) {   
            if(getConection()!=null)
               getConection().getTransaction().rollback();
            throw new Exception("Erro al buscar");
         }
    }

    @Override
    public Boolean eliminar() throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Object guardar(long transactionID) throws Exception {
        if(this.currentTransaction==transactionID){
            return guardarEntidad(this);
        }
        throw new Exception("No se pudo guardar");
    }

    @Override
    public Object modificar() throws Exception {
        return modificarEntidad(this);
    }

    public List listarTodos() throws Exception{
        try {
             getConection();
             getConection().beginTransaction();
             String hql="FROM AgenteQuimico AS a  WHERE a.eliminado = :estado";
             Query query =getConection().createQuery(hql);
             
             query.setBoolean("estado", false);
             List l=null;
             l=query.list();
             getConection().getTransaction().commit();
             return l;
         } catch (Exception ex) {   
            if(getConection()!=null)
               getConection().getTransaction().rollback();
            throw new Exception("Erro al buscar");
         }
    }

    @Override
    public String toString() {
        return  nombre ;
    }

    @Override
    public boolean join(long transactionID) {
        if(this.currentTransaction==0){
            return false;
        }
        this.currentTransaction=transactionID;
        return true;
            
    }

    @Override
    public boolean commit(long transactionID) throws Exception{
        if(this.currentTransaction==transactionID){
            this.guardar(transactionID);
            return true;
        }
        System.out.println("id de transaccion equivocado");
        System.out.println("currentTransaction= "+this.currentTransaction);
        System.out.println("transactionId= "+this.currentTransaction);
        throw new Exception("No se pudo guardar el agente quimico");
        
    }

    @Override
    public boolean cancel(long transactionID) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Object guardar() throws Exception {
        return guardarEntidad(this);
    }


}


