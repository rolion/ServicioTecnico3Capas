package Datos;
// Generated Sep 4, 2015 11:14:54 AM by Hibernate Tools 4.3.1


import interfaces.ProtoType;
import interfaces.THibernateHelper;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.hibernate.HibernateException;
import org.hibernate.Query;

/**
 * Servicio generated by hbm2java
 */
public class Servicio extends THibernateHelper implements java.io.Serializable, ProtoType {


     private Integer id;
     private String descripcion;
     private Float precio;
     private Boolean eliminado;
     private Set detallePeritos = new HashSet(0);
     private long currentTransaction;
    public Servicio() {
        this.currentTransaction=0;
    }

    public Servicio(String descripcion, Float precio, Boolean eliminado, Set detallePeritos) {
       this.descripcion = descripcion;
       this.precio = precio;
       this.eliminado = eliminado;
       this.detallePeritos = detallePeritos;
    }
   
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }
    public String getDescripcion() {
        return this.descripcion;
    }
    
    public void setDescripcion(String descripcion) {
        this.descripcion = descripcion;
    }
    public Float getPrecio() {
        return this.precio;
    }
    
    public void setPrecio(Float precio) {
        this.precio = precio;
    }
    public Boolean getEliminado() {
        return this.eliminado;
    }
    
    public void setEliminado(Boolean eliminado) {
        this.eliminado = eliminado;
    }
    public Set getDetallePeritos() {
        return this.detallePeritos;
    }
    
    public void setDetallePeritos(Set detallePeritos) {
        this.detallePeritos = detallePeritos;
    }

    @Override
    public List buscar() throws Exception {
        String q="FROM Servicio s WHERE s.id= :id AND s.eliminado = :estado";
        return buscarEntidad(q, this.id);
    }

    @Override
    public Boolean eliminar() throws Exception {
        eliminarEntidad(this);
        return true;
    }



    @Override
    public Object modificar() throws Exception {
        return modificarEntidad(this);
    }
    public List buscarPorNombre() throws Exception{
        try{
            initTransaction();
            Query query =getConection().createQuery("FROM Servicio s WHERE s.descripcion like :descripcion"
                    + " AND s.eliminado = :estado").
                    setString("descripcion", this.descripcion+"%")
                    .setBoolean("estado", Boolean.FALSE);
            List lista=query.list();
            comitTransaction();
            return lista;
        }catch(HibernateException he){
            System.out.println(he.getMessage());
            rollbackTransaciont();
            throw new Exception("Error al buscar");
        }catch(Exception e){
            System.out.println(e.getMessage());
            rollbackTransaciont();
            throw new Exception("Error al buscar");
        }
        
    }
    public List listarTodos() throws Exception{
        try{
            initTransaction();
            Query q=getConection().createQuery("FROM Servicio e WHERE e.eliminado= :estado")
                    .setBoolean("estado", Boolean.FALSE);
            List r=q.list();
            
            comitTransaction();
            return r;
        }catch(HibernateException he)
        {
            rollbackTransaciont();
            System.out.println(he.getMessage());
            throw new Exception("Error al listar todos los servicios");
        }catch(Exception ex){
            rollbackTransaciont();
            System.out.println(ex.getMessage());
            throw new Exception("Error al listar todos los servicios");
        }
    }

    @Override
    public String toString() {
        return  descripcion ;
    }

    @Override
    public Object guardar(long transactionID) throws Exception {
        return guardarEntidad(this);
    }

    @Override
    public boolean join(long transactionID) {
        if(this.currentTransaction!=0){
            return false;
        }
        this.currentTransaction=transactionID;
        return true;
    }

    @Override
    public boolean commit(long transactionID) throws Exception {
            if(this.currentTransaction!=transactionID){
            System.out.println("id de transaccion equivocado");
            System.out.println("currentTransaction= "+this.currentTransaction);
            System.out.println("transactionID= "+transactionID);
            return false;
        }
        this.guardar(transactionID);
        return true;
    }

    @Override
    public boolean cancel(long transactionID) {
        if(this.currentTransaction==transactionID && this.id!=null){
            try {
                eliminarEntidad(this);
            } catch (Exception ex) {
                System.out.println("Error al cancelar el servicio");
                Logger.getLogger(Servicio.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return false;
    }

    @Override
    public Object guardar() throws Exception {
        return guardarEntidad(this);
    }

    @Override
    public Object copiarProfunda() {
        Servicio clone=new Servicio();
        clone.setDescripcion(this.descripcion);
        clone.setEliminado(this.eliminado);
        clone.setId(this.id);
        clone.setPrecio(this.precio);
        return clone;
    }
    
    

}


